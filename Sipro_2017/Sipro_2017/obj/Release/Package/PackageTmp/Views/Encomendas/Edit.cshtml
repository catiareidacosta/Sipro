@model Sipro_2017.Encomenda

@{
    ViewBag.Title = "Edit";
}

<h2>Edit</h2>

@using (Html.BeginForm())
{
    SiproEntities db = new SiproEntities();
    IEnumerable<produto_new> produto_new = new List<produto_new>();
    @Html.AntiForgeryToken()
    <form id='your-form-name' method='POST'>
        <div class="form-horizontal" id="result">
            <h4>Encomenda</h4>
            <div class="center-div">
                <div>
                    <input type="submit" value="Gravar" />
                    <input type="button" value="Cancelar" onclick="forwardMe('index')">
                    <script> function forwardMe(url) {document.location = '@Url.Action("Index", "Encomendas")';} </script>
                </div>
            </div>
            <hr />
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            <div class="form-group">
                <div class="col-md-10">
                    @Html.Label("Cliente / Fornecedor")
                </div>
                <div class="col-md-10">
                    @Html.DropDownList("morada_cliente", null, "--Select One--", htmlAttributes: new { @class = "form-control", @name = "morada"})
                    @Html.ValidationMessageFor(model => model.morada_cliente, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                <div class="col-md-10">
                    @Html.Label("Nr Encomenda Externa")
                </div>

                <div class="col-md-10">
                    @Html.EditorFor(model => model.encomendaExterna, "--Select One--", new { htmlAttributes = new { @class = "form-control", @name = "encExterna" } })
                    @Html.ValidationMessageFor(model => model.encomendaExterna, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group">
                <div class="col-md-10">
                    @Html.Label("Orçamento encomenda")
                </div>
                <div class="col-md-10">
                    @Html.EditorFor(model => model.encomenda_orcamento, new { htmlAttributes = new { @class = "form-control", @id = "orca" } })
                    @Html.DropDownList("encomenda_orcamento", null, "--Select One--", htmlAttributes: new { @class = "hidden", @id = "orcamentos" })
                    @Html.ValidationMessageFor(model => model.encomenda_orcamento, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group">
                <div class="col-md-10">
                    @Html.Label("Descrição")
                </div>
                <div class="col-md-10">
                    @Html.EditorFor(model => model.descricao_encomenda, new { htmlAttributes = new { @class = "form-control", @name = "descEcomenda" } })
                    @Html.ValidationMessageFor(model => model.descricao_encomenda, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>
        <script>
           function validaOrcamentos() {
            var idOrcamento = document.getElementById("orca").value;
            var els = document.getElementById("orcamentos").childElementCount;
            var exit = false;
            for (var i = 0; i < els; ++i) {
                if (idOrcamento == document.getElementById("orcamentos").options.item(i).text){
                    document.getElementById("orcamentos").options[i + 1].selected = true;
                    exit = true;
                }
            }
            if (!exit) {
                if (confirm("Inserir novo orçamento ?")) { document.location = '@Url.Action("Create", "Orcamentoes")'; }
                else {
                    document.getElementById("orca").value = "";
                    document.getElementById("orca").focus();
                }
            }
            return false;
        }
            //alteraqtd
            function altera(i) {
                document.getElementById("qtdProdutsExits" + i).value;
                
                var id=document.getElementById("id"+i).value;
                var descProdutos = document.getElementById("descProdutos" + i).value;
                var qtd = document.getElementById("qtdProdutsExits" + i).value;
                document.getElementById("produtosAlterados").value =document.getElementById("produtosAlterados").value+"$"+ id + ";" + descProdutos + ";" + qtd;
                return false;
            }

            function valida(Id) {
               var codigoProduto_id = document.getElementById(Id).value;
               var els = document.getElementById("idProdutos" + Id).childElementCount;
               var exit = false;
               for (var i = 0; i < els; ++i) {
                   if (codigoProduto_id == document.getElementById("idProdutos" + Id).options.item(i).text
                            || Id == document.getElementById("idProdutos" + Id).options.item(i).text) {
                       document.getElementById("codigoproduto").value = codigoProduto_id;
                       document.getElementById("prdSelected").value = codigoProduto_id;
                       document.getElementById("descProdutos" + Id).value = document.getElementById("descProdutos" + Id).options[i + 1].value;
                       document.getElementById("descProdutos" + Id).options[i + 1].selected = true;
                       document.getElementById("qtdProdut" + Id).focus();
                       document.getElementById("prdSelected").value = codigoProduto_id;
                       document.getElementById("descSelected").value = document.getElementById("descProdutos" + Id).options.item(i + 1).text;
                       exit = true;
                    }
               }
               if (!exit) {
                    if (confirm("Inserir novo produto ?")) { document.location = '@Url.Action("Create", "Produtoes")'; }
                    else {
                        document.getElementById(Id).value = "";
                        document.getElementById(Id).focus();
                    }
                }
                return false;
            }
        </script>
        <div class="form-group">
            <table class="table">
                <tr><th>Referencia</th><th>Descrição</th><th>Quantidade Unitária</th><th>Preço</th></tr>
                @Html.TextBox("produtosAlterados", null, htmlAttributes: new { @class = "hidden", @name = "produtosAlterados", @id = "produtosAlterados"})
                @Html.TextBox("data", null, htmlAttributes: new { @class = "hidden", @name = "data", @id = "data" })
                 <tr>
                    @for (var i = 0; i < 10; i++)
                    {
                        var codIndex = "codigoproduto" + i;
                        var descIndex = "descProduto" + i;
                        var qtdIndex = "qtdProduto" + i;
                    <tr>
                        <td>
                            <p>
                                @Html.DropDownList("codigoProduto_id", null, htmlAttributes: new { @class = "hidden", @id = "idProdutos" + i })
                                @if(i < Model.produto_new.Count())
                                {
                                    @Html.EditorFor(model => model.produto_new.ElementAt(i).codcomercial, new { htmlAttributes = new { @class = "form-control", @id ="id"+i, @name = "id" + i,
                                   @onchange = "return valida(" + i + ")" } })
                                }
                                else
                                {
                                    @Html.EditorFor(model => model.codigoProduto_id, new { htmlAttributes = new { @class = "form-control", @id = i, @onchange = "return valida(" + i + ")" } })
                                }
                                @Html.TextBox("codigoproduto" + i, null, htmlAttributes: new { @class = "hidden", @id= "codigoproduto"})
                                <input id="prdSelected" name="prdSelected" type="hidden" disabled="disabled" class="hidden" />
                        </td>
                        <td>
                            @if (i < Model.produto_new.Count())
                            {
                                @Html.DropDownList("codigoProduto_desc", null, Model.produto_new.ElementAt(i).descricao, htmlAttributes: new { @name = "desc", @id = "descProdutos" + i, @disabled = "disabled" })
                                if (Model.produto_new.ElementAt(i).descricao != null)
                                {
                                    try
                                    {
                                    @Html.TextBox(Model.produto_new.ElementAt(i).descricao, null, htmlAttributes: new { @class = "hidden", @name = "descCRC", @id = "desproduto" + i })
                                    }
                                    catch
                                    {
                                    @Html.TextBox("select value", null, htmlAttributes: new { @class = "hidden", @name = "descCRC", @id = "desproduto" + i })
                                    }
                                }
                            }
                            else
                            {
                                @Html.DropDownList("codigoProduto_desc", null, " Select One", htmlAttributes: new { @name = "desc", @id = "descProdutos" + i, @disabled = "disabled" })
                            }
                            <input id="descSelected" name="descSelected" type="hidden" disabled="disabled" />
                        </td>
                        <td>
                            @if (i < Model.produto_new.Count())
                            {
                                @Html.EditorFor(model => model.produto_new.ElementAt(i).qtd, new { htmlAttributes = new { @class = "form-control", @id = "qtdProdutsExits"+i, @name="qtd",
                                    @onchange = "return altera(" + i + ")" } })
                            }
                            else
                            {
                                @Html.EditorFor(model => model.quantidade, new { htmlAttributes = new { @class = "form-control", @id = "qtdProduts" + i } })

                            }
                            <input id="qtdSelected" name="qtdSelected" type="hidden" disabled="disabled" class="hidden" />
                            @Html.TextBox("qtdproduto" + i, null, htmlAttributes: new { @id = "qtdProdut" + i, @class = "hidden" })
                        </td>
                        <td>
                            @if (i < Model.produto_new.Count())
                            {
                                var formated = String.Format("{0:0.000}", Model.produto_new.ElementAt(i).preco);
                                @Html.TextBoxFor(model => model.produto_new.ElementAt(i).preco, formated, new{ htmlAttributes = new { @class = "form-control", @name = "preco" } })
                            }
                            else
                            {
                                var formated = String.Format("{0:0.000}", " ");
                                @Html.TextBox(" ", formated, new { htmlAttributes = new { @class = "form-control", @id = "precoProduts" + i , @name = "precoProduts" + i } })
                            }
                            <input id="precoSelected" name="precoSelected" type="hidden" disabled="disabled" class="hidden" />
                            @Html.TextBox("preco" + i, null, htmlAttributes: new { @id = "preco" + i, @class = "hidden" })
                        </td>
                    </tr>
                    }
                </table>
            </div>

        <script type=”text/javascript”>
        function changePrice(var teste)
        {
            alert($(‘#SelectedCountry option:selected’).text());
        }
        
    </script>

            <div class="form-group">
            <div class="col-md-10">
                @Html.Label("Data Prevista")
            </div>
            <div class="col-md-10">
                @Html.TextBoxFor(model => model.dataPrevista, "{0:dd-MM-yyyy}", new { @class = "datepicker", @onblur = "checkDt(this)", @size = "8" })
            </div>
        </div>
            <div class="form-group">
                <div class="col-md-10">
                    @Html.Label("Ficheiro")
                </div>
                <div class="col-md-10">
                    @Html.EditorFor(model => model.ficheiro_encomenda, new { htmlAttributes = new { @class = "form-control", @name = "ficheiroEncomenda" } })
                    @Html.ValidationMessageFor(model => model.ficheiro_encomenda, "", new { @class = "text-danger" })
                </div>
            </div>
        </form>
            }
            @section Scripts {
                @Scripts.Render("~/bundles/jqueryval")
            }
<script language="javascript">
    $('preco').load(function () {
            alert("Load price");
        });

    function checkDt(fld) {
        var mo, day, yr;
        var entry = fld.value;
        if (entry != "" && entry != null) {
            var reLong = /\b\d{1,2}[\/-]\d{1,2}[\/-]\d{4}\b/;
            var reShort = /\b\d{1,2}[\/-]\d{1,2}[\/-]\d{2}\b/;
            var valid = (reLong.test(entry)) || (reShort.test(entry));
            if (valid) {
                var delimChar = (entry.indexOf("/") != -1) ? "/" : "-";
                var delim1 = entry.indexOf(delimChar);
                var delim2 = entry.lastIndexOf(delimChar);
                day = parseInt(entry.substring(0, delim1), 10);
                mo = parseInt(entry.substring(delim1 + 1, delim2), 10);
                yr = parseInt(entry.substring(delim2 + 1), 10);
                // handle two-digit year
                if (yr < 100) {
                    var today = new Date();
                    var currCent = parseInt(today.getFullYear() / 100) * 100;
                    var threshold = (today.getFullYear() + 15) - currCent;
                    if (yr > threshold) { yr += currCent - 100; } else { yr += currCent; }
                }
                fld.value = day + "/" + mo + "/" + yr;
                appendTitle();
                return true;
            } else { alert("Invalid date format. Enter as dd/mm/yyyy."); }
            return false;
        }
        else {
            appendTitle();
            return true;
        }
    }
</script>
